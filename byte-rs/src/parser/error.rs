use crate::core::error::*;
use crate::lexer::*;

/// Errors generated by the lexer.
#[derive(Debug)]
pub enum ParserError {
	ExpectedEnd(TokenAt),
	ExpectedSymbol {
		symbol: &'static str,
		context: &'static str,
	},
	ExpectedExpressionValue,
	InvalidExpression,
}

impl IsError for ParserError {
	fn output(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		match self {
			ParserError::ExpectedEnd(got) => {
				write!(f, "expected statement end, got `{got}`")
			}
			ParserError::ExpectedSymbol { symbol, context } => {
				write!(f, "at {context}: expected `{symbol}`")
			}
			ParserError::ExpectedExpressionValue => {
				write!(f, "expected expression value")
			}
			ParserError::InvalidExpression => {
				write!(f, "invalid expression")
			}
		}
	}
}
